<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cheeseknife</name>
    </assembly>
    <members>
        <member name="T:CheeseBind.BaseBindAttribute">
            <summary>
            Base bind attribute, to include a ResourceId
            which should refer to an Android view resource id.
            </summary>
        </member>
        <member name="T:CheeseBind.BindView">
            <summary>
            Bind view attribute. Android widgets based on the
            View super class can be resolved at runtime when
            annotated with this attribute. This attribute is only
            permitted on instance fields.
            </summary>
        </member>
        <member name="T:CheeseBind.OnClick">
            <summary>
            Bind OnClick event handler onto an Android View.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, EventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnCheckedChange">
            <summary>
            Bind OnCheckedChange event handler onto an Android CompoundButton View.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, CompoundButton.CheckedChangeEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnEditorAction">
            <summary>
            Bind editor action event handler onto an Android TextView.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, TextView.EditorActionEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnFocusChange">
            <summary>
            Bind FocusChanged event handler onto an Android View.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, View.FocusChangeEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnItemClick">
            <summary>
            Bind item click event handler onto an Android AdapterView.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, AdapterView.ItemClickEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnItemLongClick">
            <summary>
            Bind item long click event handler onto an Android AdapterView.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, AdapterView.ItemLongClickEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnLongClick">
            <summary>
            Bind long click event handler onto an Android View.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, View.LongClickEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnTouch">
            <summary>
            Bind touch event handler onto an Android View.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, View.TouchEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnTextChanged">
            <summary>
            Bind text changed event handler onto an Android View.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, Android.Text.TextChangedEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnAfterTextChanged">
            <summary>
            Bind after text changed event handler onto an Android View.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, Android.Text.AfterTextChangedEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.OnItemSelected">
            <summary>
            Bind item selected event handler onto an Android Spinner View.
            Your method must have the following signature:
            <para></para><para></para>
            void SomeMethodName(object sender, Spinner.ItemSelectedEventArgs e) { ... }
            </summary>
        </member>
        <member name="T:CheeseBind.CheeseknifeException">
            <summary>
            Cheeseknife exception which gets thrown when binding mappings
            are wrong or fail ...
            </summary>
        </member>
        <member name="M:CheeseBind.CheeseknifeException.#ctor(System.Type,System.String)">
            <summary>
            Call this constructor with an Android view class type and a UI
            event name to indicate that the view class is not compatible
            with the particular event type specified.
            </summary>
            <param name="viewType">View type.</param>
            <param name="eventName">Event name.</param>
        </member>
        <member name="M:CheeseBind.CheeseknifeException.#ctor(System.Type[])">
            <summary>
            Call this constructor with a list of required event type 
            parameters to indicate that the parameters couldn't be found
            or matched to the signature of the user attributed method.
            </summary>
            <param name="requiredEventParameters">Required event types.</param>
        </member>
        <member name="M:CheeseBind.CheeseknifeException.GetViewTypeExceptionMessage(System.Type,System.String)">
            <summary>
            Gets the view type exception message for an Android view class
            that can't receive the specified event type.
            </summary>
            <returns>The view type exception message.</returns>
            <param name="viewType">View type.</param>
            <param name="eventName">Event name.</param>
        </member>
        <member name="M:CheeseBind.CheeseknifeException.GetArgumentTypeExceptionMessage(System.Type[])">
            <summary>
            Gets the argument type exception message when the user attributed
            method doesn't have the same number of parameters as the specified
            event signature, or the parameter types don't match between the
            event and user method.
            </summary>
            <returns>The argument type exception message.</returns>
            <param name="requiredEventParameters">Required event parameters.</param>
        </member>
        <member name="T:CheeseBind.Cheeseknife">
            <summary>
            Cheeseknife! It's like a Butterknife with a weird shape!
            <para></para><para></para>
            Inspired by the extremely helpful Java based Butterknife
            Android library, this helper class allows for easy Android
            view and common event handler bindings for Xamarin.Android.
            This binding happens at runtime rather than compile time.
            </summary>
        </member>
        <member name="M:CheeseBind.Cheeseknife.Bind(Android.App.Activity)">
             <summary>
             Bind the specified parent activity, scanning all class
             member fields and methods for bindable attributions. The
             assumption is that the activitie's 'Window.DecorView.RootView'
             represents the root view in the layout hierarchy for the
             given activity.<para></para>
             <para></para>
             Sample activity usage:<para></para>
             <para></para>
             [Bind(Resource.Id.my_text_view)]<para></para>
             TextView myTextView;<para></para>
             <para></para>
             [OnClick(Resource.Id.my_button)]<para></para>
             void OnMyButtonClick(object sender, EventArgs e) {<para></para>
             . . . myTextView.Text = "I clicked my button!";<para></para>
             }<para></para>
             <para></para>
             protected override void OnCreate(Bundle bundle) {<para></para>
             . . . base.OnCreate(bundle);<para></para>
            <para></para>
             . . . SetContentView(Resource.Layout.Main);<para></para>
             . . . Cheeseknife.Bind(this);<para></para>
             <para></para>
             . . . myTextView.Text = "I was bound!";<para></para>
             }<para></para>
             </summary>
             <param name="parent">Parent.</param>
        </member>
        <member name="M:CheeseBind.Cheeseknife.Bind(System.Object,Android.Views.View)">
            <summary>
            Bind the specified parent and view, scanning all class
            member fields and methods for binding attributions.
            This method would normally be called to bind a fragment
            or other arbitrary view container. eg:<para></para>
            <para></para>
            Fragment Example Usage:<para></para>
            <para></para>
            In your OnCreateView method ...<para></para>
            var view = inflater.Inflate(Resource.Layout.fragment, null);<para></para>
            Cheeseknife.Bind(this, view);<para></para>
            return view;<para></para>
            <para></para>
            In your OnDestroyView method ...<para></para>
            Cheeseknife.Reset(this);<para></para>
            </summary>
            <param name="parent">Parent.</param>
            <param name="view">View.</param>
        </member>
        <member name="M:CheeseBind.Cheeseknife.Reset(System.Object)">
            <summary>
            Reset the specified parent fields to null, which is useful
            within the OnDestroyView fragment lifecycle method, particularly
            if you are using RetainInstance = true.
            </summary>
            <param name="parent">Parent.</param>
        </member>
        <member name="M:CheeseBind.Cheeseknife.BindingEventPreserver">
            <summary>
            In order to prevent the linker from stripping out
            the Android UI events, we need to preserve a method
            that references each of the event types we would like
            to keep. Note that this method never actually gets
            called anywhere, but simply marks the event types
            to be preserved. If you want to add other events to
            Cheeseknife, be sure to register dummy events in this
            method to be sure it doesn't get stripped from your
            release builds. Does this feel hacky? Sure does - 
            thankyou Linker!
            </summary>
        </member>
        <member name="M:CheeseBind.Cheeseknife.GetBindableEvents">
            <summary>
            Gets the binding attribute events to iterate through
            when checking for methods to bind in the Android view.
            If you want to add more bindable method types, make
            sure to add a new InjectOnXXXXX class, and register it
            in the dictionary in this method. Also don't forget to
            make sure the linker doesn't strip out your required
            Android UI event type (use the BindingEventPreserver
            dummy method above to include an event reference so it
            doesn't get linked away in a release build).
            </summary>
            <returns>The binding attribute types.</returns>
        </member>
        <member name="M:CheeseBind.Cheeseknife.GetAttributedFields(System.Type,System.Object)">
            <summary>
            Gets the attributed fields inside the parent object with
            the matching type of attribute.
            </summary>
            <returns>The attributed fields.</returns>
            <param name="attributeType">Attribute type.</param>
            <param name="parent">Parent.</param>
        </member>
        <member name="M:CheeseBind.Cheeseknife.GetAttributedProperties(System.Type,System.Object)">
            <summary>
            Gets the attributed properties inside the parent object with
            the matching type of attribute.
            </summary>
            <returns>The attributed properties.</returns>
            <param name="attributeType">Attribute type.</param>
            <param name="parent">Parent.</param>
        </member>
        <member name="M:CheeseBind.Cheeseknife.GetAttributedMethods(System.Type,System.Object)">
            <summary>
            Gets the attributed methods inside the parent object with
            the matching type of attribute.
            </summary>
            <returns>The attributed methods.</returns>
            <param name="attributeType">Attribute type.</param>
            <param name="parent">Parent.</param>
        </member>
        <member name="M:CheeseBind.Cheeseknife.ResolveAndroidView``1(Android.Views.View,System.Int32)">
            <summary>
            Resolves an android view to a specific view type. This is
            needed to allow custom Android view classes to resolve
            correctly (eg, Com.Android.Volley.NetworkImageView etc).
            </summary>
            <returns>The android view.</returns>
            <param name="view">Parent view to resolve view from.</param>
            <param name="resourceId">Resource identifier.</param>
            <typeparam name="T">The required specific Android view type.</typeparam>
        </member>
        <member name="M:CheeseBind.Cheeseknife.BindBaseView(System.Object,Android.Views.View)">
            <summary>
            Binds the parent class by iterating over all of its
            fields, properties and methods, checking if they have
            binding attributes. For any fields/props/methods that
            have binding attributes do the following:<para></para>
            <para></para>
            1. If it is a field/prop -> attempt to resolve the actual
            Android widget in the given view and assign it as the
            field value, effectively 'binding' it.<para></para>
            <para></para>
            2. If it is a method -> attempt to apply an event
            handler of the related type to the widget identified
            by the resource id specified in the attribute. Some
            widget types are verified before applying the events.
            </summary>
            <param name="parent">Parent.</param>
            <param name="view">View.</param>
        </member>
        <member name="M:CheeseBind.Cheeseknife.BindMethod(System.Type,System.Reflection.MethodInfo,System.Object,Android.Views.View,System.String)">
            <summary>
            Binds a method by mapping the appropriate event handler to
            the user's attributed receiving method.
            </summary>
            <param name="attributeType">Attribute Type.</param>
            <param name="method">Method.</param>
            <param name="parent">Parent.</param>
            <param name="view">View.</param>
            <param name="eventName">Event name.</param>
        </member>
    </members>
</doc>
