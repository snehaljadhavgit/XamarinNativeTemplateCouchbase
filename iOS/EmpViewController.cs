// This file has been autogenerated from a class added in the UI designer.

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using CoreGraphics;
using Foundation;
using UIKit;

namespace XamarinNativeTemplate.iOS
{
	public partial class EmpViewController : UIViewController , INotifyPropertyChanged
	{
        MainViewModel MainVm
        {
            get
            {
                return AppDelegate.Locator.MainVm;
            }
        }
		public EmpViewController (IntPtr handle) : base (handle)
		{
            
		}

        public event PropertyChangedEventHandler PropertyChanged;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            MainVm.BuildEmployeeList();

            tvEmployee.Source = new EmployeeTableViewSource(MainVm.AllEmployees);
            tvEmployee.RowHeight = UITableView.AutomaticDimension;
            tvEmployee.EstimatedRowHeight = 40f;
            tvEmployee.ReloadData();
            this.NavigationItem.Title=StringsConstants.EMPLOYEE_LIST_PAGETITLE;

            MainVm.AllEmployees.CollectionChanged += AllEmployees_CollectionChanged;
        }

        void AllEmployees_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            //TODO: perform any specific action (if any) that is needed after a collection is changed and then reload the data into list.

            tvEmployee.ReloadData();
        }

        // This method is called by the Set accessor of each property.
        // The CallerMemberName attribute that is applied to the optional propertyName
        // parameter causes the property name of the caller to be substituted as an argument.
        //private void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
        //{
        //    if (PropertyChanged != null)
        //    {
        //        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        //    }
        //}
       
        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
            // Release any cached data, images, etc that aren't in use.     
        }
	}
}
